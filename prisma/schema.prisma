// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                  @id @default(autoincrement())
  uuid         String               @unique @default(cuid())
  createdAt    DateTime             @default(now()) @map(name: "created_at")
  updatedAt    DateTime             @default(now()) @map(name: "updated_at")
  refreshToken String?              @map(name: "refresh_token")
  username     String?              @unique
  phone        String?              @unique
  password     String               @map(name: "password_hash")
  isActive     Boolean              @default(true)
  lastSession  DateTime             @default(now()) @map(name: "last_session")
  userInfo     UserInfo?
  roles        Role[]
  platforms    UserManagePlatform[]

  @@map("user")
}

model Customer {
  id         Int              @id @default(autoincrement())
  uuid       String           @unique @default(cuid())
  phone      String           @unique
  email      String?           @unique
  code       String
  userInfoId Int?
  packages   CustomerPackage?
  userInfo   UserInfo?
  billings   Billing[]

  @@map("customer")
}

model CustomerPackage {
  id                 Int            @id @default(autoincrement())
  uuid               String         @unique @default(cuid())
  createdAt          DateTime       @default(now()) @map(name: "created_at")
  updatedAt          DateTime       @default(now()) @map(name: "updated_at")
  isActive           Boolean        @default(true)
  totalPrice         Decimal
  customPackagePrice Decimal
  discountPrice      Decimal
  description        String
  billingDate        DateTime       @map(name: "billing_date")
  subscriptions      Subscription[]
  BillingDetail      BillingDetail[]
  customer           Customer?      @relation(fields: [customerId], references: [id])
  customerId         Int?           @unique

  @@map("customer_package")
}

model UserInfo {
  id         Int       @id @default(autoincrement())
  uuid       String    @unique @default(cuid())
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")
  lastName   String?   @map(name: "last_name")
  firstName  String?   @map(name: "first_name")
  alias      String?
  avatar     String
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?      @unique
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?      @unique

  @@map("user_info")
}

model Role {
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  name      String   @id
  users     User[]

  @@map("role")
}

model Subscription {
  id                 Int                   @id @default(autoincrement())
  uuid               String                @unique @default(cuid())
  createdAt          DateTime              @default(now()) @map(name: "created_at")
  updatedAt          DateTime              @default(now()) @map(name: "updated_at")
  customPrice        Decimal
  screenSlots        Int                   @map("screen_slots")
  isActive           Boolean               @default(true)
  packageId          Int                   @map("package_id")
  customerPackage    CustomerPackage?      @relation(fields: [packageId], references: [id])
  BillingDetail      BillingDetail?        @relation(fields: [billingDetailId], references: [id])
  billingDetailId    Int?
  suscriptionAccount SubscriptionAccount[]

  @@map("subscription")
}

model SubscriptionAccount {
  id             Int            @id @default(autoincrement())
  uuid           String         @unique @default(cuid())
  email          String
  password       String
  slotPrice      Decimal        @default(0) @map("slot_price")
  completePrice  Decimal        @default(0) @map("complete_price")
  isSoldBySlots  Boolean?       @map("is_sold_by_slots")
  createdAt      DateTime       @default(now()) @map(name: "created_at")
  updatedAt      DateTime       @default(now()) @map(name: "updated_at")
  isActive       Boolean        @default(true)
  platformId     Int            @map("platform_id")
  slots          Int?
  availableSlots Int?
  platform       Platform?      @relation(fields: [platformId], references: [id])
  suscription    Subscription[]

  @@unique([email, platformId])
  @@map("subscription_account")
}

model Platform {
  id                   Int                   @id @default(autoincrement())
  uuid                 String                @unique @default(cuid())
  name                 String                @unique
  createdAt            DateTime              @default(now()) @map(name: "created_at")
  updatedAt            DateTime              @default(now()) @map(name: "updated_at")
  logo                 String?
  subscriptionAccounts SubscriptionAccount[]
  managers             UserManagePlatform[]

  @@map("platform")
}

model UserManagePlatform {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  platform   Platform @relation(fields: [platformId], references: [id])
  platformId Int      @map("platform_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([userId, platformId])
  @@map("user_manage_platform")
}

model BillingDetail {
  quantity        Int
  id              Int               @id @default(autoincrement())
  uuid            String            @unique @default(cuid())
  costumerPackage CustomerPackage[]
  subscriptions   Subscription[]
  Billing         Billing?          @relation(fields: [billingId], references: [id])
  billingId       Int?              @map("billing_id")

  @@map("billing_detail")
}

model Billing {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @default(cuid())
  createdAt      DateTime        @default(now()) @map(name: "created_at")
  totalAmount    Decimal
  customerId     Int             @map("customer_id")
  status         BillingStatus
  customer       Customer        @relation(fields: [customerId], references: [id])
  billingDetails BillingDetail[]

  @@map("billing")
}

enum BillingStatus {
  PAID
  PENDING
}

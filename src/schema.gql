# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccessTokenResponseModel {
  accessToken: String!
  refreshToken: String!
}

input CreateAccountInput {
  email: String
  firstName: String
  lastName: String
  password: String
  phone: String!
}

input CreateAdminAccountInput {
  email: String!
  password: String!
}

input CreateSubscriptionAccountInput {
  completePrice: Float!
  email: String!
  isSoldBySlots: Boolean!
  password: String!
  platformUUID: String!
  slotPrice: Float
  slots: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginUserInput {
  password: String!
  username: String!
}

type Mutation {
  activeAccount(data: CreateAccountInput!): UserWithInfo!
  createAdminAccount(createAdminAccountInput: CreateAdminAccountInput!): UserWithInfo!
  createSubscriptionAccount(data: CreateSubscriptionAccountInput!): SubscriptionAccountModel!
  getRefreshToken(token: String!): AccessTokenResponseModel!
  login(loginUserInput: LoginUserInput!): AccessTokenResponseModel!
  updateUserAccount(data: UpdateAccountInput!): UserWithInfo!
}

type PaginatedSubscriptionAccountModel {
  edges: [SubscriptionAccountModelEdge!]
  endCursor: String
  hasNextPage: Boolean!
  nodes: [SubscriptionAccountModel!]
  totalCount: Int!
}

type PlatformModel {
  logo: String
  name: String!
  slotPrice: Float
  uuid: String!
}

type Query {
  getAllPlatforms: [PlatformModel!]!
  getAllSubscriptionAccounts(after: String, name: String, take: Int = 10): PaginatedSubscriptionAccountModel!
  getCurrentUser: UserModel!
  getManagedPlatforms: [PlatformModel!]!
  getSubscriptionAccounsByPlatform(platformUUID: String!): [SubscriptionAccountModel!]!
  getUserInfo(uuid: ID!): UserModel!
}

type SubscriptionAccountModel {
  availableSlots: Float
  completePrice: Float!
  createdAt: DateTime!
  email: String!
  isActive: Boolean!
  isSoldBySlots: Boolean
  password: String!
  platform: PlatformModel!
  slotPrice: Float
  slots: Float
  updatedAt: DateTime!
  uuid: String!
}

type SubscriptionAccountModelEdge {
  cursor: String!
  node: SubscriptionAccountModel!
}

input UpdateAccountInput {
  email: String
  firstName: String
  isActive: Boolean
  lastName: String
  password: String
  phone: String
  uuid: ID!
}

type UserInfo {
  avatar: String!
  firstName: String
  lastName: String
}

type UserModel {
  id: Float!
  phone: String!
  roles: [String!]!
  username: String!
}

type UserWithInfo {
  phone: String
  userInfo: UserInfo!
  username: String
  uuid: ID!
}